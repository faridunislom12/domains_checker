defmodule DomainChecker do
  use GenServer

  ## API

  def start_monitoring(domains) do
    Enum.each(domains, fn domain ->
      {:ok, _pid} = GenServer.start(__MODULE__, domain, name: via_tuple(domain))
    end)
  end

  ## GenServer Callbacks

  def init(domain) do
    schedule_check()
    {:ok, domain}
  end

  def handle_info(:check, domain) do
    result = check_domain(domain)
    log_results(domain, result)
    schedule_check()
    {:noreply, domain}
  end

  ## Helpers

  defp schedule_check do
    Process.send_after(self(), :check, 60_000)
  end

  defp check_domain(domain) do
    case :gen_tcp.connect(String.to_charlist(domain), 80, [:binary, active: false], 5000) do
      {:ok, socket} ->
        :gen_tcp.close(socket)
        1

      {:error, _reason} ->
        0
    end
  end

  defp log_results(domain, result) do
    log_dir = "logs/checker"
    File.mkdir_p!(log_dir)

    log_file = Path.join(log_dir, "#{domain}.log")
    timestamp = DateTime.utc_now() |> DateTime.to_string()
    line = "#{timestamp} â€” #{result}\n"

    case File.write(log_file, line, [:append]) do
      :ok -> :ok
      {:error, reason} -> IO.puts("[ERROR] Failed to write log: #{inspect(reason)}")
    end
  end

  defp via_tuple(domain) do
    {:via, Registry, {DomainChecker.Registry, domain}}
  end
end
